
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Astro</title>

    <script src="https://code.jquery.com/jquery-3.1.1.js" integrity="sha256-16cdPddA6VdVInumRGo6IbivbERE8p7CQR3HzTBuELA=" crossorigin="anonymous"></script>
    <script src="js/astrochart.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=<%= APIkey %>&libraries=places"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css">

    <script>

        var autocomplete;

        //Building a chart from the data
    	function createChart(data){
            var radix = new astrology.Chart('paper', 600, 600).radix(data);
            if (data.cusps){
                radix.addPointsOfInterest( {"As":[data.cusps[0]],"Ic":[data.cusps[3]],"Ds":[data.cusps[6]],"Mc":[data.cusps[9]]});
            }
			radix.aspects();

    	};

        //translating decimal values of the angle into minutes with rounding till 2 numbers
        function decToMinutes(decimal){
            var split = decimal.split('.');
            var result = split[0] + '&deg;' + (parseInt(split[1]) * 0.6).toString().substr(0,2) + '&prime;';
            return result;
        }

        //create a table of signs
        function createZodiac(data){
            var reporter = new astrology.Zodiac( data.cusps );
            var signs = astrology.SYMBOL_SIGNS;

            //table
            var zodiac = document.createElement('table');
            zodiac.id = "zodiac";
            zodiac.setAttribute('float','right');
            zodiac.classList.add('table', 'is-narrow');

            //thead
            var thead = document.createElement('thead');
            var tr = document.createElement('tr');
            var th = document.createElement('th');
            th.setAttribute('colspan', 5);
            th.classList.toggle('has-text-centered');
            th.innerHTML = '<p class="subtitle is-5">Tropical Zodiac</p>';
            tr.append(th);
            thead.append(tr);
            zodiac.append(thead);

            //tbody
            var tbody = document.createElement('tbody');

            for (var planetName in data.planets){
                var row = document.createElement('tr');
                row.id = planetName;

                var point = {
                    'planetSymbol': '',
                    'planet': planetName,
                    'signSymbol': '',
                    'sign': signs[reporter.getSign(data.planets[planetName])-1],
                    'sign_degrees': decToMinutes((data.planets[planetName][0] % 30).toString())
                }

                //creating cells with the className equal to the property
                for (var name in point) {
                    //console.log(name + "=" + point[name]);
                    var cell = document.createElement('td');
                    cell.className = name;
                    cell.id = name+'_'+row.id;
                    if (name.match('Symbol')){
                        var div = document.createElement('div');
                        div.id = cell.id+'_div';
                        cell.append(div);
                    }
                    row.append(cell);
                }

                tbody.append(row);
                zodiac.append(tbody);
                document.getElementById('zodiac').append(zodiac);

                //filling in values
                for (var i = 0; i < row.childNodes.length; i++) {
                    if (row.childNodes[i].className.match('Symbol')){
                        var cellDiv = document.getElementById(row.childNodes[i].id+'_div');
                        var svg = new astrology.SVG(cellDiv.id, 30, 30);
                        var symbol = svg.getSymbol(point[row.childNodes[i + 1].className], 15, 15);

                        cellDiv.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" version="1.1">' + symbol.innerHTML + "</svg>";

                    }else{
                        row.childNodes[i].innerHTML = point[row.childNodes[i].className];
                    }
                }
            }
        }

        //Check if there is data already submitted
        function checkData(){
            <% if (error){ %>
                console.log('Error');
            <%} else { %>
                <% if (data){ %>
                    var stringData = <%- JSON.stringify(data) %>;
                    createChart(stringData);
                    createZodiac(stringData);
                <%} %>
            <%} %>

        }

        //Launching autocomplete from google
        function launchAutocomplete(){
            var input = document.getElementById('placeOfBirth');
            autocomplete = new google.maps.places.Autocomplete(
                input,
                {
                  types: ["(cities)"]
                }
            );
            autocomplete.addListener("place_changed", onPlaceChanged);
        }

        // getting the data for the selected city
        function onPlaceChanged(){
            const place = autocomplete.getPlace();
            var lat = place.geometry.location.lat();
            var lng = place.geometry.location.lng();
            document.getElementById('lat').value = lat;
            document.getElementById('lng').value = lng;
            $.get('https://maps.googleapis.com/maps/api/timezone/json?key=<%= APIkey %>&timestamp=0&location=' + lat + ',' + lng, function(response){
                var timezone = response.rawOffset/3600;
                document.getElementById('timeZone').value = timezone;
            })
        }

        function checkTimeAble(){
            var input = document.getElementById('timeOfBirth');
            var checkbox = document.getElementById('timeCheckbox');
            if (checkbox.checked){
                if (!input.getAttribute('disabled')){
                    input.setAttribute('disabled', true);
                };
            }else{
                if (input.getAttribute('disabled')) {
                    input.removeAttribute('disabled');
                }
            }
        }

        //afterloadfunctions
        function loadEverything(){
            checkData();
            launchAutocomplete();
            checkTimeAble();
            document.getElementById('form').addEventListener(
                'submit', formCheckSubmit, false
            );
        }

        //enabling/disabling timeOfBirth input if the time is unknown
        function toggleTime(){
            var input = document.getElementById('timeOfBirth');
            if (input.getAttribute('disabled')) {
                input.removeAttribute('disabled')
            }else{
                input.setAttribute('disabled', true);
            }
        }
        //validate the date to be dd mm yyyy
        function isValidDate(dateString){
                // First check for the pattern
                if(!/^\d{1,2}\.\d{1,2}\.\d{4}$/.test(dateString))
                    return false;

                // Parse the date parts to integers
                var parts = dateString.split(".");
                var day = parseInt(parts[0], 10);
                var month = parseInt(parts[1], 10);
                var year = parseInt(parts[2], 10);

                // Check the ranges of month and year
                if(year < 1000 || year > 3000 || month == 0 || month > 12)
                    return false;

                var monthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];

                // Adjust for leap years
                if(year % 400 == 0 || (year % 100 != 0 && year % 4 == 0))
                    monthLength[1] = 29;

                // Check the range of the day
                return day > 0 && day <= monthLength[month - 1];
            };
        //validate the date to be hh:mm
        function isValidTime(timeString){
                // First check for the pattern
                if(!/^\d{1,2}:\d{1,2}$/.test(timeString))
                    return false;

                // Parse the date parts to integers
                var parts = timeString.split(":");
                var hour = parseInt(parts[0], 10);
                var minute = parseInt(parts[1], 10);

                // Check the ranges of month and year
                if(hour < 0 || hour > 23 || minute < 0 || minute > 60)
                    return false;

                // Check the range of the day
                return true
            };

        function formCheckSubmit(e){
            e.preventDefault();
            var form = document.getElementById('form');
            //date
            var dateOfBirthInput = document.getElementById('dateOfBirth');
            var dateOfBirth = dateOfBirthInput.value;
            if (!isValidDate(dateOfBirth)){
                if (!dateOfBirthInput.classList.contains('is-danger')){
                    dateOfBirthInput.classList.toggle('is-danger');
                }
            }else{
                if (dateOfBirthInput.classList.contains('is-danger')){
                    dateOfBirthInput.classList.toggle('is-danger');
                }
            }
            //time
            var noTime = document.getElementById('timeCheckbox').checked;
            if (!noTime){
                var timeOfBirthInput = document.getElementById('timeOfBirth');
                var timeOfBirth = timeOfBirthInput.value;
                if (!isValidTime(timeOfBirth)){
                    if (!timeOfBirthInput.classList.contains('is-danger')){
                        timeOfBirthInput.classList.toggle('is-danger');
                    }
                }else{
                    if (timeOfBirthInput.classList.contains('is-danger')){
                        timeOfBirthInput.classList.toggle('is-danger');
                    }
                }
            }
            var placeOfBirthInput = document.getElementById('placeOfBirth');
            var lat = document.getElementById('lat').value;
            var lng = document.getElementById('lng').value;
            var timeZone = document.getElementById('timeZone').value;
            if (lat == "" || lat < -90 || lat > 90 || lng < -180 || lng > 180 || lng == "" || timeZone == "" || timeZone < -12 || timeZone > 14){
                if (!placeOfBirthInput.classList.contains('is-danger')){
                    placeOfBirthInput.classList.toggle('is-danger');
                }
            }else{
                if (placeOfBirthInput.classList.contains('is-danger')){
                    placeOfBirthInput.classList.toggle('is-danger');
                }
            }
            var dangerous = document.getElementsByClassName('is-danger');
            if (!dangerous.length){
                form.submit();
            }
        }
    </script>
</head>
<body onLoad='loadEverything()'>
    <div class="container">
        <section class="section">
            <p class="subtitle is-5">Enter your data:</p>
            <div class="level-left">
                <form action="/natal" method="post" class="form" id="form">
                    <div class="field ">
                        <label> Date of Birth </label>
                        <input id="dateOfBirth" name="dateOfBirth" class="input is-small" placeholder="DD.MM.YYYY"/>
                    </div>
                    <div class="field ">
                        <label> Time of Birth </label>
                        <input id="timeOfBirth" name="timeOfBirth" class="input is-small" placeholder="HH:MM"/>
                        <label class="checkbox">
                            <input id="timeCheckbox" type="checkbox" onChange="toggleTime()">Time is unknown
                        </label>
                    </div>
                    <div class="field ">
                        <label>Place of Birth</label>
                        <input id="placeOfBirth" name="placeOfBirth" type="text" class="input is-small"/>
                    </div>
                    <!-- For storing longitude, latitude and timezone, calculatedon city selection -->
                    <input id="lat" name="lat" hidden></input>
                    <input id='lng' name='lng' hidden></input>
                    <input id='timeZone' name='timeZone' hidden></input>
                    <div class="control">
                        <button class="button is-primary" type="submit">Submit</button>
                    </div>
                </form>
            </div>
        </section>
        <section>
            <div class="columns is-vcentered">
                <div id='paper' class="column"></div>
                <div id="zodiac" class="column"></div>
            </div>
        </section>
    </div>

</body>
</html>
